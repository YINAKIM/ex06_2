<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.zerock</groupId>
  <artifactId>part6_ex05</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>part6_ex05</name>
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>

    <!--  properties 추가한내용
    자바버전, 스프링버전, AOP를위한 aspectj버전, 로그용slf4j버전-->
    <java-version>1.8</java-version>
    <org.springframework-version>5.0.7.RELEASE</org.springframework-version>

<!-- part5 AOP
  버전 변경 :  aspectj-version 1.9.0
  버전 변경 :  slf4j-version 1.7.25
  -->
    <org.aspectj-version>1.9.0</org.aspectj-version>
    <org.slf4j-version>1.7.25</org.slf4j-version>

  </properties>




  <dependencies>
    <!--  스프링 컨텍스트리스너 쓴다, 스프링으로 웹프로젝트 만들꺼다 : web.xml  -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>${org.springframework-version}</version>
      <exclusions>
        <exclusion>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>



    <!--  web.xml만들어줌  -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>${org.springframework-version}</version>
    </dependency>

    <!--  마이바티스 연동시 추가, transaction관리  -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
      <version>5.3.7</version>
    </dependency>

    <!--  jdbc  -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>5.2.0.RELEASE</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>5.2.0.RELEASE</version>
    </dependency>



    <!--  AOP 기능을 위한 dependency
      AspectJ : Java AOP 소프트웨어의 사실상의 표준이라고 해도 될 정도로 널리 사용되고 있는 소프트웨어

      aspectjrt : AspectJ 런타임프로그램 -> 이걸 추가해야 AspectJ의 기능을 사용할 수 있다.
      aspectjweaver : aspect의 정보를 바탕으로 aspect를 구성한 코드를 생성하는데 필요한 유틸리티 프로그램
                ( spring-aop는 따로임 주의, 하지만 이 두가지가 추가되어있어야 spring-aop도 사용가능 )
    -->
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjrt</artifactId>
      <version>${org.aspectj-version}</version>
    </dependency>

    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjweaver</artifactId>
      <version>${org.aspectj-version}</version>
    </dependency>
<!--AspectJ : 스프링이 AOP처리된 객체 생성할 때 aspectjwaever 라이브러리를 사용함 !! -->



    <!-- javax.servlet-api : 3.0 이상 유지
        https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.1.0</version>
      <scope>provided</scope>
    </dependency>

    <!--   파일업로드
       [1] Servlet3.0 이전 : commons-fileupload 라이브러리 또는 cos.jar이용
       [2] Servlet3.0 이후(Tomcat7.0) : 기본적으로 업로드되는 파일을 처리할 수 있는 기능이 추가됨

        ==> 현제 서블릿 3.0(톰캣9.0) 이상이기때문에 라이브러리 추가 없이 되는지 테스트 : 500에러,
            500에러 ( Handler dispatch failed; nested exception is java.lang.NoClassDefFoundError: org/apache/commons/io/IOUtils )
        ==> 결국 서블릿 3.0이상이어도 commons-fileupload 는 필요한듯, 이거 있으면 됨.
        -->
    <dependency>
      <groupId>commons-fileupload</groupId>
      <artifactId>commons-fileupload</artifactId>
      <version>1.3.3</version>
    </dependency>

    <!--   500에러
     ( Handler dispatch failed; nested exception is java.lang.NoClassDefFoundError: org/apache/commons/io/IOUtils )
            그래서 commons-io추가하고 테스트 OK
    -->
    <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
    <!--      <dependency>-->
    <!--          <groupId>commons-io</groupId>-->
    <!--          <artifactId>commons-io</artifactId>-->
    <!--          <version>2.6</version>-->
    <!--      </dependency>-->

<!-- 썸네일레이터 -->
    <dependency>
      <groupId>net.coobird</groupId>
      <artifactId>thumbnailator</artifactId>
      <version>0.4.8</version>
    </dependency>


    <!-- jsp내장객체 사용하기 위함 -->
    <dependency>
      <groupId>javax.servlet.jsp</groupId>
      <artifactId>jsp-api</artifactId>
      <version>2.1</version>
      <scope>provided</scope>
    </dependency> <dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>jstl</artifactId>
    <version>1.2</version>
  </dependency>

    <!--  테스트
      Junit : 4.12이상유지 / spring-test  -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency> <dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-test</artifactId>
    <version>${org.springframework-version}</version>
  </dependency>

    <!--  Lombok 1.18 확인완료  -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.0</version>
      <scope>provided</scope>
    </dependency>



    <!-- Hikari커넥션풀
    https://mvnrepository.com/artifact/com.zaxxer/HikariCP -->
    <dependency>
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
      <version>4.0.3</version>
    </dependency>

    <!-- 마이바티스 : persistence framework -> DB작업 하는 프레임워크
    1. Connection 자동 close() : 메모리 관리, 네트워크 비용 관리
    2. 내부적으로 SqlSessionFactory 객체 생성하여 SQL Session만들어서 처리
    3. PreparedStatement, ResultSet 객체 생성 및 관리 - #{바인딩변수}로 작성만하면됨
    4. SQL코드를 그대로 사용해서 편리
    5. JDBC관련 코드작업 줄일 수 있음
    -->
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.2</version>
    </dependency>

    <!-- spring과 mybatis를 연결 -->
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis-spring</artifactId>
      <version>2.0.2</version>
    </dependency>


    <!--  콘솔에 쿼리 Log출력  -->
    <dependency>
      <groupId>org.bgee.log4jdbc-log4j2</groupId>
      <artifactId>log4jdbc-log4j2-jdbc4</artifactId>
      <version>1.16</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/log4j/log4j -->
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.17</version>
    </dependency>


    <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.8.0-beta0</version>
    </dependency>

    <!-- 콘솔에 쿼리출력하기 - pom.xml
    https://blog.naver.com/rladlskdlsk/222330268194
     <dependency>
          <groupId>org.apache.logging.log4j</groupId>
          <artifactId>log4j-api</artifactId>
          <version>2.0.1</version>
        </dependency>
        <dependency>
          <groupId>org.apache.logging.log4j</groupId>
          <artifactId>log4j-core</artifactId>
          <version>2.0.1</version>
        </dependency>
        <dependency>
          <groupId>org.lazyluke</groupId>
          <artifactId>log4jdbc-remix</artifactId>
          <version>0.2.7</version>
        </dependency>
-->

    <!--   JSON 데이터 만들기   -->
    <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.9.5</version>
    </dependency>

    <!--  gson : 테스트할 때 Java인스턴스를 JSON타입의 문자열로 변환할 때 필요  -->
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>2.8.5</version>
    </dependency>

    <!--  XML 바인드  -->
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-xml</artifactId>
      <version>2.9.5</version>
    </dependency>

      <dependency>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.4.3</version>
      </dependency>

  </dependencies>



  <build>
    <finalName>ex04</finalName>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
      <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.2.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>
      <plugins>
          <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-compiler-plugin</artifactId>
            <version>3.8.0</version>
            <configuration>
                  <source>8</source>
                  <target>8</target>
              </configuration>
          </plugin>
      </plugins>
  </build>

</project>
