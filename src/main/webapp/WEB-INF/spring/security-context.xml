<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--직접 만든 접근제한 핸들러 : security:http안에 ref로 참조-->
    <bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"/>

    <!-- 권한 별 로그인 후처리 해주는 CustomLoginSuccessHandler 를 빈으로 등록 -->
    <bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"/>

    <!-- 기본은 로그인페이지로 보내는 기본 로그아웃핸들러 쓰면되고, 필요시 customLogoutSuccessHandler 사용-->
    <bean id="customLogoutSuccess" class="org.zerock.security.CustomLogoutSuccessHandler"/>

    <!--  BCryptPasswordEncdoder는 스프링 시큐리티 내장 API -->
    <bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>


    <security:http auto-config="true" use-expressions="true">
        <!-- security:intercept-url => 특정 URI접근시 인터셉터를 이용하여 접근제한
             pattern속성 : URI패턴 지정
             access속성 : 권한체크
             access속성 값 지정하는 2가지 방법
             1. 표현식이용 : <security:http>의 기본설정방법 ,
             2. 문자열 이용  : 만약 [2. 문자열]방법으로 하고싶으면 use-expression="false"지정할 것, 그리고 이방법으로 하면 JSP에서 처리할 때 방법이 다름
             -->


        <!-- role별로 인터셉팅할 url -->
        <security:intercept-url pattern="/sample/all" access="permitAll"/>
        <security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
        <security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>

        <!-- 로그인페이지 -->
        <!-- 로그인 성공 후처리 핸들러 : 권한 별로 지정한 페이지로 redirect해줌 -->
        <security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccess"/>

        <!-- 접근제한 핸들러 -->
        <security:access-denied-handler ref="customAccessDenied"/>
    <!--<security:access-denied-handler error-page="/accessError"/> : error-page, ref 둘중하나만 사용-->


    <!--<security:csrf disabled="true"/>-->


        <!--  로그아웃 핸들러 등록 -->
        <security:logout logout-url="/springLogout" invalidate-session="true"/>

        <!--내가만든 로그아웃 핸들러 ref추가한 로그아웃핸들러-->
    <!-- <security:logout logout-url="/customLogout" invalidate-session="true" success-handler-ref="customLogoutSuccess"/>-->
    </security:http>



    <security:authentication-manager>
        <security:authentication-provider>

            <security:jdbc-user-service data-source-ref="dataSource"
           users-by-username-query="SELECT USERID USERNAME, USERPW PASSWORD, ENABLED FROM TBL_MEMBER WHERE USERID= ? "
            authorities-by-username-query="SELECT USERID USERID, AUTH FROM TBL_MEMBER_AUTH WHERE USERID= ? "/>

            <security:password-encoder ref="bcryptPasswordEncoder"/>

      </security:authentication-provider>
    </security:authentication-manager>



</beans>